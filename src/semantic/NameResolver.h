# pragma once

#include "../ast/astvisitor.h"
#include "../ast/Expression/ExprConstBlock.h"
#include "../ast/Expression/ExprStruct.h"
#include "../ast/Expression/expression.h"
#include "../ast/root.h"
#include "../ast/Expression/ExprArray.h"
#include "../ast/Expression/ExprBlock.h"
#include "../ast/Expression/ExprBreak.h"
#include "../ast/Expression/ExprCall.h"
#include "../ast/Expression/ExprContinue.h"
#include "../ast/Expression/ExprField.h"
#include "../ast/Expression/ExprGroup.h"
#include "../ast/Expression/ExprIf.h"
#include "../ast/Expression/ExprIndex.h"
#include "../ast/Expression/ExprLiteral.h"
#include "../ast/Expression/ExprLoop.h"
#include "../ast/Expression/ExprMatch.h"
#include "../ast/Expression/ExprMethodcall.h"
#include "../ast/Expression/ExprOpbinary.h"
#include "../ast/Expression/ExprOpunary.h"
#include "../ast/Expression/ExprPath.h"
#include "../ast/Expression/ExprReturn.h"
#include "../ast/Expression/ExprUnderscore.h"
#include "../ast/Item/ItemConst.h"
#include "../ast/Item/ItemEnum.h"
#include "../ast/Item/ItemFn.h"
#include "../ast/Item/ItemImpl.h"
#include "../ast/Item/ItemStruct.h"
#include "../ast/Item/ItemTrait.h"
#include "../ast/Pattern/PatternIdentifier.h"
#include "../ast/Pattern/PatternLiteral.h"
#include "../ast/Pattern/PatternPath.h"
#include "../ast/Pattern/PatternReference.h"
#include "../ast/Pattern/PatternTupleStruct.h"
#include "../ast/Pattern/PatternWildcard.h"
#include "../ast/Statement/StmtEmpty.h"
#include "../ast/Statement/StmtExpr.h"
#include "../ast/Statement/StmtItem.h"
#include "../ast/Statement/StmtLet.h"
#include "../ast/Type/type.h"
#include "../ast/Type/TypeArray.h"
#include "../ast/Type/TypePath.h"
#include "../ast/Type/TypeReference.h"
#include "../ast/Type/TypeUnit.h"

namespace JaneZ {
class NameResolver : public ASTVisitor{
public:
    NameResolver() = default;

    ~NameResolver() = default;
    
    //Start: generated by github copilot.
    void visit(ASTNode &node) override {
        if(auto *p = dynamic_cast<ASTRootNode *>(& node)) {
            node.accept(*this);
        }else if(auto *p = dynamic_cast<Expression *>(& node)) {
            node.accept(*this);
        }else if(auto *p = dynamic_cast<Item *>(& node)) {
            node.accept(*this);
        }else if(auto *p = dynamic_cast<Pattern *>(& node)) {
            node.accept(*this);
        }else if(auto *p = dynamic_cast<Statement *>(& node)) {
            node.accept(*this);
        }else if(auto *p = dynamic_cast<Type *>(& node)) {
            node.accept(*this);
        }else if(auto *p = dynamic_cast<TypeArray *>(& node)) {
            node.accept(*this);
        }else if(auto *p = dynamic_cast<TypePath *>(& node)) {
            node.accept(*this);
        }else if(auto *p = dynamic_cast<TypeReference *>(& node)) {
            node.accept(*this);
        }else if(auto *p = dynamic_cast<TypeUnit *>(& node)) {
            node.accept(*this);
        }else{
            std::cout << "Unknown node type in PrintVisitor\n";
        }
    }
    //End: generated by github copilot.

    void visit(ASTRootNode &node) override {
        for(auto &item : node.child) {
            item->accept(*this);
        }
    }

    //Expression
    void visit(Expression &node) override {
        if(auto *p = dynamic_cast<ExprArray *>(& node)) {
            node.accept(*this);
        }else if(auto *p = dynamic_cast<ExprBlock *>(& node)) {
            node.accept(*this);
        }else if(auto *p = dynamic_cast<ExprBreak *>(& node)) {
            node.accept(*this);
        }else if(auto *p = dynamic_cast<ExprCall *>(& node)) {
            node.accept(*this);
        }else if(auto *p = dynamic_cast<ExprConstBlock *>(& node)) {
            node.accept(*this);
        }else if(auto *p = dynamic_cast<ExprContinue *>(& node)) {
            node.accept(*this);
        }else if(auto *p = dynamic_cast<ExprField *>(& node)) {
            node.accept(*this);
        }else if(auto *p = dynamic_cast<ExprGroup *>(& node)) {
            node.accept(*this);
        }else if(auto *p = dynamic_cast<ExprIf *>(& node)) {
            node.accept(*this);
        }else if(auto *p = dynamic_cast<ExprIndex *>(& node)) {
            node.accept(*this);
        }else if(auto *p = dynamic_cast<ExprLiteral *>(& node)) {
            node.accept(*this);
        }else if(auto *p = dynamic_cast<ExprLoop *>(& node)) {
            node.accept(*this);
        }else if(auto *p = dynamic_cast<ExprMatch *>(& node)) {
            node.accept(*this);
        }else if(auto *p = dynamic_cast<ExprMethodcall *>(& node)) {
            node.accept(*this);
        }else if(auto *p = dynamic_cast<ExprOpbinary *>(& node)) {
            node.accept(*this);
        }else if(auto *p = dynamic_cast<ExprOpunary *>(& node)) {
            node.accept(*this);
        }else if(auto *p = dynamic_cast<ExprPath *>(& node)) {
            node.accept(*this);
        }else if(auto *p = dynamic_cast<ExprReturn *>(& node)) {
            node.accept(*this);
        }else if(auto *p = dynamic_cast<ExprStruct *>(& node)) {
            node.accept(*this);
        }else if(auto *p = dynamic_cast<ExprUnderscore *>(& node)) {
            node.accept(*this);
        }else{
            std::cout << "Unknown Expression type in PrintVisitor\n";
        }
    }

    //TODO


    //Item
    void visit(Item &node) override {
        if(auto *p = dynamic_cast<ItemConstDecl *>(& node)) {
            node.accept(*this);
        }else if(auto *p = dynamic_cast<ItemEnumDecl *>(& node)) {
            node.accept(*this);
        }else if(auto *p = dynamic_cast<ItemFnDecl *>(& node)) {
            node.accept(*this);
        }else if(auto *p = dynamic_cast<ItemImplDecl *>(& node)) {
            node.accept(*this);
        }else if(auto *p = dynamic_cast<ItemStructDecl *>(& node)) {    
            node.accept(*this);
        }else if(auto *p = dynamic_cast<ItemTraitDecl *>(& node)) {
            node.accept(*this);
        }else{
            std::cout << "Unknown Item type in PrintVisitor\n";
        }
    }

    //TODO

    //Pattern
    void visit(Pattern &node) override {
        if(auto *p = dynamic_cast<PatternIdentifier *>(& node)) {
            node.accept(*this);
        }else if(auto *p = dynamic_cast<PatternLiteral *>(& node)) {
            node.accept(*this);
        }else if(auto *p = dynamic_cast<PatternPath *>(& node)) {
            node.accept(*this);     
        }else if(auto *p = dynamic_cast<PatternReference *>(& node)) {
            node.accept(*this);
        }else if(auto *p = dynamic_cast<PatternWildCard *>(& node)) {   
            node.accept(*this);
        }else if(auto *p = dynamic_cast<PatternTupleStruct *>(& node)) {
            node.accept(*this);
        }else{
            std::cout << "Unknown Pattern type in PrintVisitor\n";
        }
    }

    //TODO

    //Statement
    void visit(Statement &node) override {
        if(auto *p = dynamic_cast<StmtEmpty *>(& node)) {
            node.accept(*this);
        }else if(auto *p = dynamic_cast<StmtExpr *>(& node)) {
            node.accept(*this);
        }else if(auto *p = dynamic_cast<StmtItem *>(& node)) {
            node.accept(*this);
        }else if(auto *p = dynamic_cast<StmtLet *>(& node)) {
            node.accept(*this);
        }else{
            std::cout << "Unknown Statement type in PrintVisitor\n";
        }
    }

    //TODO

    
};
}