# pragma once

#include "scope.h"
#include "../ast/astvisitor.h"
#include "../ast/root.h"
#include "../ast/Item/ItemConst.h"
#include "../ast/Item/ItemEnum.h"
#include "../ast/Item/ItemFn.h"
#include "../ast/Item/ItemImpl.h"
#include "../ast/Item/ItemStruct.h"
#include "../ast/Item/ItemTrait.h"
#include <iostream>


namespace JaneZ { 
class GlobalScopeBuilder: public ASTVisitor{
public:
    std::shared_ptr<ScopeNode> global_scope;

    GlobalScopeBuilder() = default;

    ~GlobalScopeBuilder() = default;

    void visit(ASTNode &node) override {}

    void visit(ASTRootNode &node) override {
        global_scope = std::make_shared<ScopeNode>();
        global_scope->ast_node = std::make_shared<ASTRootNode>(node);
        for(auto &item : node.child) {
            item->accept(*this);
        }
    }

    //Item
    void visit(Item &node) override {
        if(auto *p = dynamic_cast<ItemConstDecl *>(& node)) {
            node.accept(*this);
        }else if(auto *p = dynamic_cast<ItemEnumDecl *>(& node)) {
            node.accept(*this);
        }else if(auto *p = dynamic_cast<ItemFnDecl *>(& node)) {
            node.accept(*this);
        }else if(auto *p = dynamic_cast<ItemImplDecl *>(& node)) {
            node.accept(*this);
        }else if(auto *p = dynamic_cast<ItemStructDecl *>(& node)) {    
            node.accept(*this);
        }else if(auto *p = dynamic_cast<ItemTraitDecl *>(& node)) {
            node.accept(*this);
        }else{
            std::cerr << "Unknown Item type in GlobalScopeBuilder\n";
        }
    }

    void visit(ItemConstDecl &node) override{
        global_scope->addValueSymbol(node.identifier, std::make_shared<Symbol>(std::make_shared<ItemConstDecl>(node), Const, node.identifier));
    }

    void visit(ItemFnDecl &node) override{
        global_scope->addValueSymbol(node.identifier, std::make_shared<Symbol>(std::make_shared<ItemFnDecl>(node), Function, node.identifier));
    }

    void visit(ItemEnumDecl &node) override{
        global_scope->addTypeSymbol(node.identifier, std::make_shared<Symbol>(std::make_shared<ItemEnumDecl>(node), Enum, node.identifier));
    }

    void visit(ItemImplDecl &node) override{}

    void visit(ItemStructDecl &node) override{
        global_scope->addTypeSymbol(node.identifier, std::make_shared<Symbol>(std::make_shared<ItemStructDecl>(node), Struct, node.identifier));
    }

    void visit(ItemTraitDecl &node) override{
        global_scope->addTypeSymbol(node.identifier, std::make_shared<Symbol>(std::make_shared<ItemTraitDecl>(node), Trait, node.identifier));
    }

    //Start generated by github copilot.
    //Expression
    void visit(Expression &node) override {}

    void visit(ExprArray &node) override{}

    void visit(ExprBlock &node) override{}

    void visit(ExprBreak &node) override{}

    void visit(ExprCall &node) override{}

    void visit(ExprConstBlock &node) override{} 

    void visit(ExprContinue &node) override{}

    void visit(ExprField &node) override{}

    void visit(ExprGroup &node) override{}

    void visit(ExprIf &node) override{}

    void visit(ExprIndex &node) override{}

    void visit(ExprLiteral &node) override{}

    void visit(ExprLoop &node) override{}

    //void visit(ExprMatch &node) override{}

    void visit(ExprMethodcall &node) override{}

    void visit(ExprOpbinary &node) override{}

    void visit(ExprOpunary &node) override{}

    void visit(ExprPath &node) override{}

    void visit(ExprReturn &node) override{}

    void visit(ExprStruct &node) override{}

    void visit(ExprUnderscore &node) override{}

    //Pattern
    void visit(Pattern &node) override{}

    void visit(PatternIdentifier &node) override{}

    void visit(PatternLiteral &node) override{}

    void visit(PatternPath &node) override{}

    void visit(PatternReference &node) override{}

    void visit(PatternWildCard &node) override{}

    //Statement
    void visit(Statement &node) override {}

    void visit(StmtEmpty &node) override{}

    void visit(StmtExpr &node) override{}

    void visit(StmtItem &node) override{}

    void visit(StmtLet &node) override{}

    //Type
    void visit(Type &node) override {}

    void visit(TypeArray &node) override{}

    void visit(TypePath &node) override{}

    void visit(TypeReference &node) override{}

    void visit(TypeUnit &node) override{}

    //Path
    void visit(Path &node) override{}

    //End generated by github copilot.
};
}