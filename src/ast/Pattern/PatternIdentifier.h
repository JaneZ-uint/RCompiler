# pragma once

#include "pattern.h"
#include <memory>
#include <string>

namespace JaneZ {
class PatternIdentifier : public Pattern {
private:
    std::string identifier;
    std::unique_ptr<Pattern> patternNoTopAlt;
    bool is_ref;
    bool is_mut;

public:
    //Start generated by Copilot.
    PatternIdentifier(std::string id, std::unique_ptr<Pattern> pattern, bool ref = false, bool mut = false)
        : identifier(std::move(id)), patternNoTopAlt(std::move(pattern)), is_ref(ref), is_mut(mut) {}
    //End generated by Copilot.

    ~PatternIdentifier() = default;

    void accept(ASTVisitor &visitor) override {
        visitor.visit(*this);
    }
};
}