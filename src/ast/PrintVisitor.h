# pragma once

#include <iostream>
#include "astvisitor.h"
#include "root.h"
#include "Expression/ExprArray.h"
#include "Expression/ExprBlock.h"
#include "Expression/ExprBreak.h"
#include "Expression/ExprCall.h"
#include "Expression/ExprContinue.h"
#include "Expression/ExprField.h"
#include "Expression/ExprGroup.h"
#include "Expression/ExprIf.h"
#include "Expression/ExprIndex.h"
#include "Expression/ExprLiteral.h"
#include "Expression/ExprLoop.h"
#include "Expression/ExprMatch.h"
#include "Expression/ExprMethodcall.h"
#include "Expression/ExprOpbinary.h"
#include "Expression/ExprOpunary.h"
#include "Expression/ExprPath.h"
#include "Expression/ExprReturn.h"
#include "Expression/ExprUnderscore.h"
#include "Item/ItemConst.h"
#include "Item/ItemEnum.h"
#include "Item/ItemFn.h"
#include "Item/ItemImpl.h"
#include "Item/ItemStruct.h"
#include "Item/ItemTrait.h"
#include "Pattern/PatternIdentifier.h"
#include "Pattern/PatternLiteral.h"
#include "Pattern/PatternPath.h"
#include "Pattern/PatternReference.h"
#include "Pattern/PatternTupleStruct.h"
#include "Pattern/PatternWildcard.h"
#include "Statement/StmtEmpty.h"
#include "Statement/StmtExpr.h"
#include "Statement/StmtItem.h"
#include "Statement/StmtLet.h"
#include "Type/type.h"
#include "Type/TypeArray.h"
#include "Type/TypePath.h"
#include "Type/TypeReference.h"
#include "Type/TypeUnit.h"

namespace JaneZ {
class PrintVisitor : public ASTVisitor{
public:
    ~PrintVisitor() = default;

    //Start: generated by github copilot.
    void visit(ASTNode &node) override{
        if(auto *p = dynamic_cast<ASTRootNode *>(& node)) {
            visit(*p);
        }else if(auto *p = dynamic_cast<ExprArray *>(& node)) {
            visit(*p);
        }else if(auto *p = dynamic_cast<ExprBlock *>(& node)) {
            visit(*p);
        }else if(auto *p = dynamic_cast<ExprBreak *>(& node)) {
            visit(*p);
        }else if(auto *p = dynamic_cast<ExprCall *>(& node)) {
            visit(*p);
        }else if(auto *p = dynamic_cast<ExprContinue *>(& node)) {
            visit(*p);
        }else if(auto *p = dynamic_cast<ExprField *>(& node)) {
            visit(*p);
        }else if(auto *p = dynamic_cast<ExprGroup *>(& node)) {
            visit(*p);
        }else if(auto *p = dynamic_cast<ExprIf *>(& node)) {
            visit(*p);
        }else if(auto *p = dynamic_cast<ExprIndex *>(& node)) {
            visit(*p);
        }else if(auto *p = dynamic_cast<ExprLiteral *>(& node)) {
            visit(*p);
        }else if(auto *p = dynamic_cast<ExprLoop *>(& node)) {
            visit(*p);
        }else if(auto *p = dynamic_cast<ExprMatch *>(& node)) {
            visit(*p);
        }else if(auto *p = dynamic_cast<ExprMethodcall *>(& node)) {
            visit(*p);
        }else if(auto *p = dynamic_cast<ExprOpbinary *>(& node)) {
            visit(*p);
        }else if(auto *p = dynamic_cast<ExprOpunary *>(& node)) {
            visit(*p);
        }else if(auto *p = dynamic_cast<ExprPath *>(& node)) {
            visit(*p);
        }else if(auto *p = dynamic_cast<ExprReturn *>(& node)) {
            visit(*p);
        }else if(auto *p = dynamic_cast<ExprUnderscore *>(& node)) {
            visit(*p);
        }else if(auto *p = dynamic_cast<ItemConstDecl *>(& node)) {
            visit(*p);
        }else if(auto *p = dynamic_cast<ItemEnumDecl *>(& node)) {
            visit(*p);
        }else if(auto *p = dynamic_cast<ItemFnDecl *>(& node)) {
            visit(*p);
        }else if(auto *p = dynamic_cast<ItemImplDecl *>(& node)) {
            visit(*p);
        }else if(auto *p = dynamic_cast<ItemStructDecl *>(& node)) {    
            visit(*p);
        }else if(auto *p = dynamic_cast<ItemTraitDecl *>(& node)) {
            visit(*p);
        }else if(auto *p = dynamic_cast<PatternIdentifier *>(& node)) {
            visit(*p);
        }else if(auto *p = dynamic_cast<PatternLiteral *>(& node)) {
            visit(*p);
        }else if(auto *p = dynamic_cast<PatternPath *>(& node)) {
            visit(*p);
        }else if(auto *p = dynamic_cast<PatternReference *>(& node)) {
            visit(*p);
        }else if(auto *p = dynamic_cast<PatternWildCard *>(& node)) {   
            visit(*p);
        }else if(auto *p = dynamic_cast<PatternTupleStruct *>(& node)) {
            visit(*p);
        }else if(auto *p = dynamic_cast<StmtEmpty *>(& node)) {
            visit(*p);
        }else if(auto *p = dynamic_cast<StmtExpr *>(& node)) {
            visit(*p);
        }else if(auto *p = dynamic_cast<StmtItem *>(& node)) {
            visit(*p);
        }else if(auto *p = dynamic_cast<StmtLet *>(& node)) {
            visit(*p);
        }else if(auto *p = dynamic_cast<Type *>(& node)) {
            visit(*p);
        }else if(auto *p = dynamic_cast<TypeArray *>(& node)) {
            visit(*p);
        }else if(auto *p = dynamic_cast<TypePath *>(& node)) {
            visit(*p);
        }else if(auto *p = dynamic_cast<TypeReference *>(& node)) {
            visit(*p);
        }else if(auto *p = dynamic_cast<TypeUnit *>(& node)) {
            visit(*p);
        }else{
            std::cout << "Unknown node type in PrintVisitor\n";
        }
    }
    //End: generated by github copilot.

    void visit(ASTRootNode &node) override {
        std::cout << "ASTRootNode\n";
        for(auto &item : node.child) {
            item->accept(*this);
        }
        std::cout << "End of ASTRootNode\n";
    }

    //Expression
    void visit(ExprArray &node) override{
        
    }
    void visit(ExprBlock &node) override;
    void visit(ExprBreak &node) override;
    void visit(ExprCall &node) override;
    void visit(ExprContinue &node) override;
    void visit(ExprField &node) override;
    void visit(ExprGroup &node) override;
    void visit(ExprIf &node) override;
    void visit(ExprIndex &node) override;
    void visit(ExprLiteral &node) override;
    void visit(ExprLoop &node) override;
    void visit(ExprMatch &node) override;
    void visit(ExprMethodcall &node) override;
    void visit(ExprOpbinary &node) override;
    void visit(ExprOpunary &node) override;
    void visit(ExprPath &node) override;
    void visit(ExprReturn &node) override;
    void visit(ExprUnderscore &node) override;
    
    //Item 
    void visit(ItemConstDecl &node) override;
    void visit(ItemEnumDecl &node) override;
    void visit(ItemFnDecl &node) override;
    void visit(ItemImplDecl &node) override;
    void visit(ItemStructDecl &node) override;
    void visit(ItemTraitDecl &node) override;

    //Pattern
    void visit(PatternIdentifier &node) override;
    void visit(PatternTupleStruct &node) override;
    void visit(PatternLiteral &node) override;
    void visit(PatternPath &node) override;
    void visit(PatternReference &node) override;
    void visit(PatternWildCard &node) override;

    //Statement
    void visit(StmtEmpty &node) override;
    void visit(StmtExpr &node) override;
    void visit(StmtItem &node) override;
    void visit(StmtLet &node) override;

    //Type
    void visit(Type &node) override;
    void visit(TypeArray &node) override;
    void visit(TypePath &node) override;
    void visit(TypeReference &node) override;
    void visit(TypeUnit &node) override;
};
}