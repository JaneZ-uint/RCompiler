# pragma once

#include "ExprBlock.h"
#include "expression.h"
#include <memory>
namespace JaneZ {
class ExprLoop : public Expression {
private:
    std::unique_ptr<ExprBlock> infinitieLoop;
    std::unique_ptr<Expression> condition;
    std::unique_ptr<ExprBlock> PredicateLoopExpression;

public:
    //Start generated by Copilot.
    ExprLoop(std::unique_ptr<ExprBlock> loopBlock)
        : infinitieLoop(std::move(loopBlock)),
          condition(nullptr),
          PredicateLoopExpression(nullptr) {}

    ExprLoop(std::unique_ptr<Expression> cond,
             std::unique_ptr<ExprBlock> predLoopExpr)
        : infinitieLoop(nullptr),
          condition(std::move(cond)),
          PredicateLoopExpression(std::move(predLoopExpr)) {}
    //End generated by Copilot.

    ~ExprLoop() = default;

    void accept(ASTVisitor &visitor) override {
        visitor.visit(*this);
    }
 
};
}