# pragma once

#include "StmtExpr.h"
#include "statement.h"
#include <memory>

namespace JaneZ {
class Pattern;
class Type;
class Expression;
class StmtLet : public Statement {
private:
    std::unique_ptr<Pattern> PatternNoTopAlt;
    std::unique_ptr<Type> type;
    std::unique_ptr<Expression> expression;

public:
    //Start generated by Copilot.
    StmtLet(std::unique_ptr<Pattern> patternNoTopAlt, std::unique_ptr<Type> type, std::unique_ptr<Expression> expression)
        : PatternNoTopAlt(std::move(patternNoTopAlt)), type(std::move(type)), expression(std::move(expression)) {}
    //End generated by Copilot.

    ~StmtLet() = default;

    void accept(ASTVisitor &visitor) override {
        visitor.visit(*this);
    }
};
}